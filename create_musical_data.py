#!/usr/bin/env python3
"""
Crear datos musicales de ejemplo en Graphiti para generaci√≥n musical
"""

import asyncio
import json
from datetime import datetime
import uuid


async def create_musical_episodes():
    """Crear episodios musicales usando MCP Graphiti"""
    
    # Episodios sobre teor√≠a musical
    musical_episodes = [
        {
            "name": "Escalas Musicales B√°sicas",
            "episode_body": json.dumps({
                "concept": "escalas_musicales", 
                "content": "Las escalas musicales son secuencias ordenadas de notas. La escala mayor sigue el patr√≥n de tonos y semitonos: T-T-S-T-T-T-S. Por ejemplo, Do Mayor: C-D-E-F-G-A-B-C",
                "examples": ["C Major: C-D-E-F-G-A-B", "G Major: G-A-B-C-D-E-F#"],
                "applications": ["composici√≥n", "improvisaci√≥n", "armon√≠a"]
            }),
            "format": "json",
            "source_description": "Teor√≠a musical fundamental"
        },
        {
            "name": "Progresiones de Acordes Populares",
            "episode_body": json.dumps({
                "concept": "progresiones_acordes",
                "content": "Las progresiones de acordes son secuencias de acordes que crean la estructura arm√≥nica de una canci√≥n",
                "progressions": {
                    "I-V-vi-IV": {"description": "Progresi√≥n pop m√°s com√∫n", "example": "C-G-Am-F"},
                    "ii-V-I": {"description": "Progresi√≥n jazz cl√°sica", "example": "Dm-G-C"},
                    "vi-IV-I-V": {"description": "Progresi√≥n emocional", "example": "Am-F-C-G"}
                },
                "genres": ["pop", "rock", "jazz", "folk"]
            }),
            "format": "json",
            "source_description": "Armon√≠a y progresiones"
        },
        {
            "name": "Patrones R√≠tmicos Fundamentales",
            "episode_body": json.dumps({
                "concept": "patrones_ritmicos",
                "content": "Los patrones r√≠tmicos definen el groove y el estilo de una pieza musical",
                "patterns": {
                    "4/4_basic": {"description": "Kick en 1 y 3, snare en 2 y 4", "pattern": "K-S-K-S"},
                    "shuffle": {"description": "Ritmo ternario swingueado", "pattern": "K-x-S-x-K-x-S-x"},
                    "latin": {"description": "Clave de son 3-2", "pattern": "x-x-K-x-x-K-x-x"}
                },
                "bpm_ranges": {"ballad": "60-80", "medium": "90-120", "fast": "130-160"}
            }),
            "format": "json",
            "source_description": "Patrones r√≠tmicos y groove"
        },
        {
            "name": "Modos Musicales y Su Car√°cter",
            "episode_body": json.dumps({
                "concept": "modos_musicales",
                "content": "Los modos son variaciones de la escala mayor que comienzan en diferentes grados",
                "modes": {
                    "ionian": {"character": "brillante, alegre", "use": "pop, folk"},
                    "dorian": {"character": "melanc√≥lico, cool", "use": "jazz, rock progresivo"},
                    "phrygian": {"character": "oscuro, espa√±ol", "use": "flamenco, metal"},
                    "lydian": {"character": "et√©reo, suspendido", "use": "film scoring"},
                    "mixolydian": {"character": "bluesy, relajado", "use": "rock, country"},
                    "aeolian": {"character": "triste, menor natural", "use": "rock, pop"},
                    "locrian": {"character": "inestable, tenso", "use": "jazz, experimental"}
                }
            }),
            "format": "json",
            "source_description": "Modos y color arm√≥nico"
        },
        {
            "name": "Generaci√≥n Musical con IA",
            "episode_body": json.dumps({
                "concept": "ai_music_generation",
                "content": "La IA puede generar m√∫sica usando diferentes enfoques: modelos estad√≠sticos, redes neuronales, y sistemas basados en reglas",
                "approaches": {
                    "rule_based": {
                        "description": "Sistemas basados en reglas de teor√≠a musical",
                        "pros": ["controlable", "interpretable", "r√°pido"],
                        "cons": ["limitado", "predecible"]
                    },
                    "neural_networks": {
                        "description": "RNNs, Transformers para secuencias musicales",
                        "pros": ["creativo", "aprende patrones complejos"],
                        "cons": ["caja negra", "requiere muchos datos"]
                    },
                    "hybrid": {
                        "description": "Combina reglas musicales con IA",
                        "pros": ["mejor control", "m√°s musical"],
                        "cons": ["m√°s complejo de implementar"]
                    }
                },
                "parameters": ["tempo", "key", "mode", "style", "complexity", "duration"]
            }),
            "format": "json",
            "source_description": "IA y generaci√≥n musical"
        }
    ]
    
    return musical_episodes


async def create_musical_knowledge_graph():
    """Crear un grafo de conocimiento musical completo"""
    
    print("üéµ Creando cap√≠tulo de generaci√≥n musical en Graphiti...")
    print("=" * 60)
    
    # Obtener episodios musicales
    episodes = await create_musical_episodes()
    
    # En un sistema real, usar√≠amos las funciones MCP de Graphiti
    # Por ahora, mostraremos la estructura propuesta
    
    print("üìä Estructura del grafo musical:")
    print("\nüéº Episodios a crear:")
    for i, episode in enumerate(episodes, 1):
        print(f"   {i}. {episode['name']}")
        print(f"      - Concepto: {json.loads(episode['episode_body'])['concept']}")
        print()
    
    print("üîó Relaciones propuestas:")
    relationships = [
        "Escalas ‚Üí conecta_con ‚Üí Modos",
        "Acordes ‚Üí usa ‚Üí Escalas", 
        "Progresiones ‚Üí compone ‚Üí Acordes",
        "Patrones_R√≠tmicos ‚Üí combina_con ‚Üí Progresiones",
        "IA_Musical ‚Üí aplica ‚Üí [Escalas, Acordes, Ritmos]",
        "Generaci√≥n ‚Üí requiere ‚Üí [Teor√≠a, Patrones, Estilo]"
    ]
    
    for rel in relationships:
        print(f"   ‚Ä¢ {rel}")
    
    print("\nüéØ Capacidades de generaci√≥n:")
    capabilities = [
        "Generar progresiones de acordes basadas en modo/g√©nero",
        "Crear melod√≠as que siguen escalas espec√≠ficas", 
        "Aplicar patrones r√≠tmicos seg√∫n el estilo",
        "Combinar elementos usando conocimiento del grafo",
        "Sugerir variaciones basadas en relaciones musicales"
    ]
    
    for cap in capabilities:
        print(f"   ‚Ä¢ {cap}")
    
    return episodes


# Funci√≥n para agregar episodios reales a Graphiti
async def add_episodes_to_graphiti(episodes):
    """Agregar episodios musicales a Graphiti usando MCP"""
    print("\nüîÑ Agregando episodios a Graphiti...")
    
    # Aqu√≠ usar√≠amos las funciones MCP reales
    # mcp__mcp-graphiti__add_episode para cada episodio
    
    for i, episode in enumerate(episodes, 1):
        print(f"   üìù Agregando episodio {i}: {episode['name']}")
        # await mcp_add_episode(episode)
    
    print("   ‚úÖ Todos los episodios agregados al grafo")


if __name__ == "__main__":
    print("üéµ GENERACI√ìN MUSICAL CON GRAPHITI")
    print(f"Fecha: {datetime.now()}")
    print("=" * 60)
    
    try:
        episodes = asyncio.run(create_musical_knowledge_graph())
        print(f"\n‚úÖ ESTRUCTURA MUSICAL CREADA")
        print(f"üìä {len(episodes)} episodios preparados para el grafo")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")